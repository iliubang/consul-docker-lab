Prog            := Function*
Function        := Identifier( FuncArg? ) { Stmt* }
FuncArg         := Identifier (, Identifier)*
Stmt            := Expr?;
                := if (Expr) Stmt
                := if (Expr) Stmt else Stmt
                := while (Expr) Stmt
                := do Stmt while (Expr);
                := for (Expr?;Expr?;Expr?) Stmt
                := {Stmt*}
Expr            := AssignExpr
AssignExpr      := EqualityExpr
                := EqualityExpr = AssignExpr
EqualityExpr    := RelationalExpr
                := EqualityExpr == RelationalExpr
                := EqualityExpr != RelationalExpr
RelationalExpr  := AddExpr
                := RelationalExpr < AddExpr
                := RelationalExpr <= AddExpr
                := RelationalExpr > AddExpr
                := RelationalExpr >= AddExpr
AddExpr         := MultiExpr
                := AddExpr + MultiExpr
                := AddExpr - MultiExpr
MultiExpr       := PrimaryExpr
                := MultiExpr * PrimaryExpr
                := MultiExpr / PrimaryExpr
PrimaryExpr     := Num
                := (Expr)
                := Identifier((Args?))?
Args            := AssignExpr(, AssignExpr)*
